import logging
import os
import secrets
import string
import time
from datetime import datetime

import pymysql.cursors
from dotenv import load_dotenv
from telegram import (KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove,
                      Update)
from telegram.ext import (Application, CommandHandler, ContextTypes,
                          MessageHandler, filters)
from telegram.helpers import escape_markdown

from web import keep_alive

load_dotenv()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

bot = Application.builder().token(str(os.getenv('BOT_TOKEN'))).build()

db = pymysql.connect(
    db=os.getenv('DB_BASE'),
    host=os.getenv('DB_HOST'),
    port=int(os.getenv('DB_PORT')),
    user=os.getenv('DB_USER'),
    password=os.getenv('DB_PASSWORD'),
    cursorclass=pymysql.cursors.DictCursor,
    charset="utf8mb4",
    autocommit=True
)
cursor = db.cursor()

main_menu = ReplyKeyboardMarkup(
    [[
        KeyboardButton("‚ùáÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é"),
        KeyboardButton("‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
    ], [
        KeyboardButton("üóÇ –ü–æ–ª—É—á–∏—Ç—å NAMING"),
        KeyboardButton("üî¢ CAPS"),
    ], [
        KeyboardButton("üóÑ –ú–µ–Ω—é –§–∞—Ä–º–∞"),
        KeyboardButton("üìá –ò–Ω—Ñ–æ –ë–∞–∏–Ω–≥–∞"),
    ], [
        KeyboardButton("üîî –í–ö–õ/–í–´–ö–õ PUSH –æ –î–µ–ø–æ–∑–∏—Ç–µ"),
        KeyboardButton("ü§© –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä"),
    ], [
        KeyboardButton("üìì –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"),
        KeyboardButton("üîñ –û—Ñ—Ñ–µ—Ä—ã"),
    ], [
        KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    ]],
    resize_keyboard=True
)
back_to_mm = ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True)

tg_support = str(os.getenv('BOT_SUPPORT'))


async def DBError(update, context, e):
    await context.bot.sendMessage(
        chat_id=update.effective_chat.id,
        text=str(e)
        )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        try:
            cursor.execute(("SELECT * FROM users WHERE tg_id = "
                            f"{update.effective_chat.id}"))
            user = cursor.fetchone()
            db.commit()

            if (user['username'] != ''):
                username = escape_markdown(user['username'])
            else:
                username = escape_markdown(update.effective_user.full_name)

            tg_link = "tg://user?id=" + str(update.effective_user.id)

            await context.bot.sendMessage(
                chat_id=update.effective_chat.id,
                text=(f"üëã [{username}]({tg_link}), –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *"
                      f"{str(os.getenv('BOT_NAME'))}*!"),
                reply_markup=main_menu,
                parse_mode="Markdown",
                )

        except pymysql.Error as e:
            await DBError(update, context, e)
            return False


async def mainMenu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        await context.bot.sendMessage(
            chat_id=update.effective_chat.id,
            text="*üìú –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:*",
            reply_markup=main_menu,
            parse_mode="Markdown",
            )


async def addCampaign(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        await context.bot.sendMessage(
            chat_id=update.effective_chat.id,
            text="*‚ùáÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏*",
            reply_markup=back_to_mm,
            parse_mode="Markdown",
            )


async def actualApps(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        await context.bot.sendMessage(
            chat_id=update.effective_chat.id,
            text="*‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è*",
            reply_markup=back_to_mm,
            parse_mode="Markdown",
            )


async def getNaming(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        await context.bot.sendMessage(
            chat_id=update.effective_chat.id,
            text="*üóÇ –ü–æ–ª—É—á–µ–Ω–∏—è –Ω—ç–π–º–∏–Ω–≥–∞*",
            reply_markup=back_to_mm,
            parse_mode="Markdown",
            )


async def camp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        await context.bot.sendMessage(
            chat_id=update.effective_chat.id,
            text="*üî¢ –ö–ê–ü–°*",
            reply_markup=back_to_mm,
            parse_mode="Markdown",
            )


async def menuFarm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        await context.bot.sendMessage(
            chat_id=update.effective_chat.id,
            text="*üóÑ –ú–µ–Ω—é —Ñ–∞—Ä–º–∞*",
            reply_markup=back_to_mm,
            parse_mode="Markdown",
            )


async def infoBaing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        await context.bot.sendMessage(
            chat_id=update.effective_chat.id,
            text="*üìá –ò–Ω—Ñ–æ –ë–∞–∏–Ω–≥–∞*",
            reply_markup=back_to_mm,
            parse_mode="Markdown",
            )


async def pushDeposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        await context.bot.sendMessage(
            chat_id=update.effective_chat.id,
            text="*üîî –ü—É—à–∏ –æ –¥–µ–ø–æ–∑–∏—Ç–µ*",
            reply_markup=back_to_mm,
            parse_mode="Markdown",
            )


async def uniqueizer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        await context.bot.sendMessage(
            chat_id=update.effective_chat.id,
            text="*ü§© –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä*",
            reply_markup=back_to_mm,
            parse_mode="Markdown",
            )


async def setTask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        await context.bot.sendMessage(
            chat_id=update.effective_chat.id,
            text="*üìì –ó–∞–¥–∞—á–∏*",
            reply_markup=back_to_mm,
            parse_mode="Markdown",
            )


async def menuOffers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        await context.bot.sendMessage(
            chat_id=update.effective_chat.id,
            text="*üîñ –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏?*",
            reply_markup=ReplyKeyboardMarkup([[
                KeyboardButton("üóí –í—Å–µ –û—Ñ—Ñ–µ—Ä—ã"),
                KeyboardButton("üìù –°–º–µ–Ω–∏—Ç—å –û—Ñ—Ñ–µ—Ä")],
                [KeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ], resize_keyboard=True),
            parse_mode="Markdown",
            )


async def allOffers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        try:
            await context.bot.sendMessage(
                chat_id=update.effective_chat.id,
                text='*üóí –í—Å–µ –æ—Ñ—Ñ–µ—Ä—ã*',
                reply_markup=ReplyKeyboardMarkup([[
                    KeyboardButton('üîñ –û—Ñ—Ñ–µ—Ä—ã'),
                    KeyboardButton('‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
                ], resize_keyboard=True),
                parse_mode="Markdown",
                )

            cursor.execute("SELECT * FROM offers")
            offers = cursor.fetchall()
            db.commit()

            if (len(offers) >= 1):
                for offer in offers:
                    name = escape_markdown(str(offer['name']))
                    source = escape_markdown(str(offer['source']))
                    type_cap = escape_markdown(str(offer['type']))
                    count = escape_markdown(str(offer['count']))
                    offer_id = escape_markdown(str(offer['offer_id']))
                    advertiser = escape_markdown(str(offer['advertiser']),
                                                 2).replace('\\', '')

                    await context.bot.sendMessage(
                        chat_id=update.effective_chat.id,
                        text=(
                            f"üîç\n–û—Ñ—Ñ–µ—Ä: *{name}*\n"
                            f"–ò—Å—Ç–æ—á–Ω–∏–∫: *{source}*\n"
                            f"–¢–∏–ø CAP: *{type_cap}*\n"
                            f"–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ: *{count}*\n"
                            f"ID: *{offer_id}*\n"
                            f"–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å: *{advertiser}*\n"
                            f"GEO: *{escape_markdown(str(offer['geo']))}*\n"
                            f"Link: *{escape_markdown(str(offer['link']))}*"
                        ), parse_mode="Markdown",
                        )
            else:
                await context.bot.sendMessage(
                    chat_id=update.effective_chat.id,
                    text="‚ùå –û—Ñ—Ñ–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", parse_mode="Markdown",
                    )

        except pymysql.Error as e:
            await DBError(update, context, e)


async def changeOffer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        await context.bot.sendMessage(
            chat_id=update.effective_chat.id,
            text="*üìù –°–º–µ–Ω–∞ –æ—Ñ—Ñ–µ—Ä–∞*",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton('üîñ –û—Ñ—Ñ–µ—Ä—ã'),
                 KeyboardButton('‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
            ], resize_keyboard=True),
            parse_mode="Markdown",
            )


async def menuUsers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        await context.bot.sendMessage(
            chat_id=update.effective_chat.id,
            text="*üë• –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏?*",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("üßæ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
                 KeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ], resize_keyboard=True),
            parse_mode="Markdown",
            )


async def allUsers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        try:
            await context.bot.sendMessage(
                chat_id=update.effective_chat.id,
                text='*üßæ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*',
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'),
                        KeyboardButton('‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
                ], resize_keyboard=True),
                parse_mode="Markdown",
                )

            cursor.execute((
                "SELECT * FROM users WHERE type NOT IN "
                "('mainadmin', 'admin')"))
            users = cursor.fetchall()
            db.commit()

            if (len(users) >= 1):
                for user in users:
                    if (user['locked'] == 1):
                        locked = "üü¢"
                    else:
                        locked = "üî¥"

                    if (user['baned'] == 1):
                        baned = "üü¢"
                    else:
                        baned = "üî¥"

                    if (user['create_timestamp'] == 0):
                        create_ts = "–ù–∏–∫–æ–≥–¥–∞"
                    else:
                        create_ts = datetime.fromtimestamp(
                            user['create_timestamp']).strftime(
                                "%d/%m/%Y, %H:%M:%S")

                    if (user['auth_timestamp'] == 0):
                        auth_ts = "–ù–∏–∫–æ–≥–¥–∞"
                    else:
                        auth_ts = datetime.fromtimestamp(
                            user['auth_timestamp']).strftime(
                                "%d/%m/%Y, %H:%M:%S")

                    await context.bot.sendMessage(
                        chat_id=update.effective_chat.id,
                        text=(f"üë§\nID: <b>{str(user['id'])}</b>\n"
                              f"Telegram ID: <b>{str(user['tg_id'])}</b>\n"
                              f"–ò–º—è: <b>{str(user['username'])}</b>\n"
                              f"–ü–∞—Ä–æ–ª—å: <b>{str(user['password'])}</b>\n"
                              f"–†–æ–ª—å: <b>{str(user['type'])}</b>\n"
                              f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: <b>{str(locked)}</b>\n"
                              f"–ó–∞–±–∞–Ω–µ–Ω: <b>{str(baned)}</b>\n"
                              f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: <b>{str(create_ts)}</b>\n"
                              f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: <b>{str(auth_ts)} </b>"
                              ), parse_mode="HTML",
                        )
            else:
                await context.bot.sendMessage(
                    chat_id=update.effective_chat.id,
                    text='*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!',
                    parse_mode="Markdown",
                    )

        except pymysql.Error as e:
            await DBError(update, context, e)


async def editUser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        try:
            commandText = update.effective_message.text.split(' ')
            await editUserStore(update, context, commandText)

        except pymysql.Error as e:
            await DBError(update, context, e)


async def editUserStore(update: Update,
                        context: ContextTypes.DEFAULT_TYPE,
                        commandText):
    try:
        if (len(commandText) == 1):
            await context.bot.sendMessage(
                chat_id=update.effective_chat.id,
                text='*‚ùå –û—à–∏–±–∫–∞ 1:* –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å _TYPE_',
                parse_mode="Markdown",
                )
        elif (len(commandText) == 2):
            types = ['username', 'password', 'type']
            if (commandText[1] in types):
                await context.bot.sendMessage(
                    chat_id=update.effective_chat.id,
                    text='*‚ùå –û—à–∏–±–∫–∞ 2:* –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å _NEW VALUE_',
                    parse_mode="Markdown",
                    )
            else:
                await context.bot.sendMessage(
                    chat_id=update.effective_chat.id,
                    text=(f"*‚ùå –û—à–∏–±–∫–∞ 1.1: * _TYPE_ [{', '.join(types)}] –Ω–µ "
                          "–Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!"),
                    parse_mode="Markdown",
                    )

        elif (len(commandText) == 3):
            cursor.execute(("SELECT * FROM users WHERE tg_id = "
                            f"{update.effective_chat.id}"))
            rows = cursor.fetchone()
            db.commit()

            data = [rows['username'], rows['type']]

            sql = ((f"UPDATE users SET {commandText[1]} = "
                    f"'{commandText[2]}' WHERE tg_id = "
                    f"{update.effective_chat.id}"))

            cursor.execute(sql)
            db.commit()

            if (commandText[1] == "username"):
                text = ("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ *–∏–º—è* —Å *"
                        f"{data[0]}* –Ω–∞ *{commandText[2]}*!")
            elif (commandText[1] == "password"):
                text = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ *–ø–∞—Ä–æ–ª—å*!"
            elif (commandText[1] == "type"):
                text = ("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ *—Ç–∏–ø* —Å *"
                        f"{data[1]}* –Ω–∞ *{commandText[2]}*!")
            else:
                text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"

            await context.bot.sendMessage(
                chat_id=update.effective_chat.id,
                text=text,
                parse_mode="Markdown",
                )

    except pymysql.Error as e:
        await DBError(update, context, e)


async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        cursor.execute(("SELECT * FROM users WHERE tg_id = "
                        f"{update.effective_chat.id}"))
        user = cursor.fetchone()
        db.commit()

        if (user['login_now'] == 1):
            await context.bot.sendMessage(
                chat_id=update.effective_chat.id,
                text=("*‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!*\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–∞–Ω–¥—É "
                      "*/start* —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å."),
                parse_mode="Markdown",
                )
        else:
            if (user):
                commandText = update.effective_message.text.split(' ')
                if (len(commandText) >= 2):
                    if (commandText[1] == user['password']):
                        cursor.execute(("UPDATE users SET login_now = "
                                        "1, auth_timestamp = "
                                        f"{time.time()} WHERE tg_id = "
                                        f"{update.effective_chat.id}"))
                        db.commit()

                        await context.bot.deleteMessage(
                            chat_id=update.effective_chat.id,
                            message_id=update.message._id_attrs[0],
                            )

                        await context.bot.sendMessage(
                            chat_id=update.effective_chat.id,
                            text="*‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!*",
                            reply_markup=main_menu,
                            parse_mode="Markdown",
                            )

                        await start(update, context)

                    else:
                        await context.bot.sendMessage(
                            chat_id=update.effective_chat.id,
                            text=("*‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!*\n–ï—Å–ª–∏ –í—ã –∑–∞–±—ã–ª–∏ "
                                  "–ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é "
                                  "–∫ {tg_support}!"),
                            parse_mode="Markdown",
                        )
                else:
                    await context.bot.sendMessage(
                        chat_id=update.effective_chat.id,
                        text=("*‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–æ–ª—å!*\n–ö–æ–º–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ "
                              "–±—ã—Ç—å /login _–í–∞—à–ü–∞—Ä–æ–ª—å_.\n–ï—Å–ª–∏ –í—ã –∑–∞–±—ã–ª–∏ "
                              f"–ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ "
                              f"{tg_support}!"),
                        parse_mode="Markdown",
                        )
            else:
                await context.bot.sendMessage(
                    chat_id=update.effective_chat.id,
                    text=("*‚õîÔ∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ "
                          f"{tg_support} –∑–∞ –ø–æ–º–æ—â—å—é!"),
                    parse_mode="Markdown",
                    )

    except pymysql.Error as e:
        await DBError(update, context, e)


async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        cursor.execute(("SELECT * FROM users WHERE tg_id = "
                        f"{update.effective_chat.id} && login_now = 1"))
        db.commit()

        if (cursor.fetchone()):
            cursor.execute(("UPDATE users SET login_now = 0 WHERE tg_id = "
                            f"{update.effective_chat.id}"))
            db.commit()

            await context.bot.sendMessage(
                chat_id=update.effective_chat.id,
                text=("*‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å!*\n–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞, "
                      "–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /login _–í–∞—à–ü–∞—Ä–æ–ª—å_."),
                reply_markup=ReplyKeyboardRemove(True),
                parse_mode="Markdown",
                )

        else:
            await context.bot.sendMessage(
                chat_id=update.effective_chat.id,
                text=("*‚úÖ –ù—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!*\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /login "
                      "_–í–∞—à–ü–∞—Ä–æ–ª—å_.\n–ï—Å–ª–∏ –í—ã –∑–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ "
                      f"–ø–æ–º–æ—â—å—é –∫ {tg_support}!"),
                parse_mode="Markdown",
                )

    except pymysql.Error as e:
        await DBError(update, context, e)


async def checkLogin(update: Update,
                     context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        cursor.execute(("SELECT * FROM users WHERE tg_id = "
                        f"{update.effective_chat.id}"))
        user = cursor.fetchone()
        db.commit()

        if (user and user['login_now'] == 1):
            return True
        else:
            if (await createUser(update, context)):
                await context.bot.sendMessage(
                    chat_id=update.effective_chat.id,
                    text=("*‚úÖ –ù—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!*\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É "
                          "/login _–í–∞—à–ü–∞—Ä–æ–ª—å_.\n–ï—Å–ª–∏ –í—ã –∑–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å, "
                          f"–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ {tg_support}!"),
                    reply_markup=ReplyKeyboardRemove(True),
                    parse_mode="Markdown",
                    )
                return False

        return False

    except pymysql.Error as e:
        await DBError(update, context, e)
        return False


async def checkRole(update: Update,
                    context: ContextTypes.DEFAULT_TYPE, roles) -> bool:
    try:
        cursor.execute(("SELECT type FROM users WHERE tg_id = "
                        f"{update.effective_chat.id}"))
        role = cursor.fetchone()
        db.commit()

        if (role['type'] in roles):
            return True
        else:
            await context.bot.sendMessage(
                chat_id=update.effective_chat.id,
                text=("‚ùå –í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!\n"
                      f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø —É {tg_support}."),
                parse_mode="Markdown",
                )
            return False

    except pymysql.Error as e:
        await DBError(update, context, e)
        return False


async def createUser(update: Update,
                     context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        cursor.execute(("SELECT * FROM users WHERE tg_id = "
                        f"{update.effective_chat.id}"))
        db.commit()

        if (cursor.fetchone()):
            return True
        else:
            if (update.effective_chat.first_name):
                username = update.effective_chat.first_name
            else:
                username = "UserName"

            password = ''
            for i in range(8):
                password += ''.join(secrets.choice(
                    string.ascii_letters + string.digits +
                    string.punctuation))

            cursor.execute(("INSERT INTO users (tg_id, username, "
                            "password, type, create_timestamp) "
                            "VALUES (%s, %s, %s, %s, %s)", (
                                update.effective_chat.id,
                                str(username), str(password), "user",
                                str(time.time()).split('.')[0])))
            db.commit()

            text = ("*‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n\nüîë –í–∞—à –ø–∞—Ä–æ–ª—å: `"
                    f"{escape_markdown(password, 2)}"
                    "`\n–ß—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /login "
                    "_–í–∞—à–ü–∞—Ä–æ–ª—å_.\n\n*‚ùóÔ∏è –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, "
                    "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–ø–æ–º–Ω–∏—Ç—å –í–∞—à –ø–∞—Ä–æ–ª—å –∏ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω–æ–µ "
                    "—Å–æ–æ–±—â–µ–Ω–∏–µ!*")

            await context.bot.sendMessage(
                chat_id=update.effective_chat.id,
                text=text,
                parse_mode="MarkdownV2",
                )

            return False

    except pymysql.Error as e:
        await DBError(update, context, e)
        return False


async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        await context.bot.sendMessage(
            chat_id=update.effective_chat.id,
            text=(
                "*üìò –ü–æ–º–æ—â—å!*\n\n"
                "üìç /login - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ\n"
                "  `–ù–∞–ø—Ä–∏–º–µ—Ä:` /login *password*\n\n"

                "üìç /edituser - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
                "  `–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:` \n"
                "    *—Ç–∏–ø* - –º–æ–∂–µ—Ç –±—ã—Ç—å _username_, _password_ –∏–ª–∏ _type_;\n"
                "    *–Ω–æ–≤–æ–µ–ó–Ω–∞—á–µ–Ω–∏–µ* - –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö.\n"
                "  `–ù–∞–ø—Ä–∏–º–µ—Ä:` /edituser *username* *–ù–æ–≤–æ–µ–ò–º—è*\n\n"

                "üìç /admins - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤\n\n"
                "üìç /logout - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ –±–æ—Ç–µ\n\n"
                "üìç /help - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"

                "–ï—Å–ª–∏ –í—ã –∑–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ "
                f"{tg_support}!"),
            parse_mode="Markdown",
            )


async def admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (await checkLogin(update, context)):
        if (await checkRole(update, context, roles=["mainadmin", "admin"])):
            try:
                cursor.execute("SELECT * FROM users WHERE type IN "
                               "('mainadmin', 'admin')")
                admins = cursor.fetchall()
                db.commit()

                if (len(admins) >= 1):
                    await context.bot.sendMessage(
                        chat_id=update.effective_chat.id,
                        text="*üëë –ê–¥–º–∏–Ω—ã!*\n\n",
                        parse_mode="Markdown",
                        )

                    for admin in admins:
                        if (admin['type'] == 'mainadmin'):
                            type = "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω"
                        elif (admin['type'] == 'admin'):
                            type = "–ê–¥–º–∏–Ω"

                        if (admin['locked'] == 1):
                            locked = "üü¢"
                        else:
                            locked = "üî¥"

                        if (admin['baned'] == 1):
                            baned = "üü¢"
                        else:
                            baned = "üî¥"

                        if (admin['create_timestamp'] == 0):
                            create_ts = "–ù–∏–∫–æ–≥–¥–∞"
                        else:
                            create_ts = datetime.fromtimestamp(
                                admin['create_timestamp']).strftime(
                                    "%d/%m/%Y, %H:%M:%S")

                        if (admin['auth_timestamp'] == 0):
                            auth_ts = "–ù–∏–∫–æ–≥–¥–∞"
                        else:
                            auth_ts = datetime.fromtimestamp(
                                admin['auth_timestamp']).strftime(
                                    "%d/%m/%Y, %H:%M:%S")

                        tg_id = str(admin['tg_id'])

                        await context.bot.sendMessage(
                            chat_id=update.effective_chat.id,
                            text=(f"üë§\nID: <b>{str(admin['id'])}</b>\n"
                                  f"Telegram ID: <b>{tg_id}</b>\n"
                                  f"–ò–º—è: <b>{str(admin['username'])}</b>\n"
                                  f"–†–æ–ª—å: <b>{str(type)}</b>\n"
                                  f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: <b>{str(locked)}</b>\n"
                                  f"–ó–∞–±–∞–Ω–µ–Ω: <b>{str(baned)}</b>\n"
                                  f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: <b>{str(create_ts)}</b>\n"
                                  f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: <b>{str(auth_ts)}</b>"
                                  ), parse_mode="HTML",
                            )
                else:
                    await context.bot.sendMessage(
                        chat_id=update.effective_chat.id,
                        text=("*üëë –ê–¥–º–∏–Ω—ã!*\n\n"
                              " ‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"),
                        parse_mode="Markdown",
                        )

            except pymysql.Error as e:
                await DBError(update, context, e)
                return False


def main():
    bot.add_handler(CommandHandler("start", start))
    bot.add_handler(CommandHandler("help", help))
    bot.add_handler(CommandHandler("edituser", editUser))
    bot.add_handler(CommandHandler("admins", admins))
    bot.add_handler(CommandHandler("login", login))
    bot.add_handler(CommandHandler("logout", logout))

    mh = [
        ("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", mainMenu),

        ("‚ùáÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", addCampaign),
        ("‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", actualApps),
        ("üóÇ –ü–æ–ª—É—á–∏—Ç—å NAMING", getNaming),
        ("üî¢ CAPS", camp),
        ("üóÑ –ú–µ–Ω—é –§–∞—Ä–º–∞", menuFarm),
        ("üìá –ò–Ω—Ñ–æ –ë–∞–∏–Ω–≥–∞", infoBaing),
        ("üîî –í–ö–õ/–í–´–ö–õ PUSH –æ –î–µ–ø–æ–∑–∏—Ç–µ", pushDeposit),
        ("ü§© –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä", uniqueizer),
        ("üìì –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", setTask),

        ("üîñ –û—Ñ—Ñ–µ—Ä—ã", menuOffers),
        ("üóí –í—Å–µ –û—Ñ—Ñ–µ—Ä—ã", allOffers),
        ("üìù –°–º–µ–Ω–∏—Ç—å –û—Ñ—Ñ–µ—Ä", changeOffer),

        ("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", menuUsers),
        ("üßæ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", allUsers),
    ]

    for button, func in mh:
        bot.add_handler(MessageHandler(
            filters.Regex("^(" + button + ")$"), func))

    keep_alive()
    bot.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
